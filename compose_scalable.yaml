services:
  front:
    build: ./front/
    ports:
      - "3000:3000"
    # depends_on:
    #   - consul
    #   - api-gateway
    #   - likes
    #   - post
    #   - profile
    #   - auth
    #   - friend
    #   - feed
    #   - logging
    

  hazelcast:
    image: hazelcast/hazelcast
    pull_policy: missing
    depends_on:
      management-center:
        condition: service_started

  management-center:
    image: hazelcast/management-center:5.3.3
    pull_policy: missing
    ports:
      - "7000:8080"
    environment:
      - MC_DEFAULT_CLUSTER=dev
      - MC_DEFAULT_CLUSTER_MEMBERS=hazelcast

  consul:
    build: ./consul
    ports:
      - "8500:8500"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/kv/hazelcast/map-name"]
      start_period: 30s
      start_interval: 1s
      timeout: 1s

  gateway-consul:
    image: consul:1.15.4
    ports:
      - "8501:8500"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      start_period: 30s
      start_interval: 1s
      timeout: 1s

  likes:
    build: ./like-service/
    depends_on:
      likes_db:
        condition: service_started
      consul:
        condition: service_healthy
  post:
    build: ./post-service/
    depends_on:
      consul:
        condition: service_healthy
  profile:
    build: ./profile-service/
    depends_on:
      consul:
        condition: service_healthy
  auth:
    build: ./auth-service/
    depends_on:
      auth_db:
        condition: service_started
      consul:
        condition: service_healthy
  friend:
    build: friend-service/
    depends_on:
      friend_db:
        condition: service_started
      consul:
        condition: service_healthy
  api-gateway:
    build: ./api-gateway/
    depends_on:
      consul:
        condition: service_healthy
      gateway-consul:
        condition: service_healthy
    ports:
      - "8084:8084"
  feed:
    build: ./feed-service/
    depends_on:
      consul:
        condition: service_healthy
  logging:
    build: ./logging-service/
    depends_on:
      consul:
        condition: service_healthy

  

  likes_db:
    image: postgres:latest
    pull_policy: missing
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root_pass
      POSTGRES_DB: likes_db
    volumes:
      - ./like-service/postgres-db-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
  profile_db:
    image: mongo:latest
    hostname: profile_db
    pull_policy: missing
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root_pass
      MONGO_INITDB_DATABASE: profile_db
    volumes:
      - ./profile-service/mongo-db-init.js:/docker-entrypoint-initdb.d/mongo-db-init.js:ro
    ports:
      - "27018:27017"

  post_db:
    image: mongo:latest
    hostname: post_db
    pull_policy: missing
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root_pass
      MONGO_INITDB_DATABASE: post_db
    volumes:
      - ./post-service/mongo-db-init.js:/docker-entrypoint-initdb.d/mongo-db-init.js:ro
    ports:
      - "27017:27017"    

  auth_db:
    image: postgres:latest
    pull_policy: missing
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root_pass
      POSTGRES_DB: auth_db
    volumes:
      - ./auth-service/postgres-db-init:/docker-entrypoint-initdb.d
    ports:
      - "5434:5432"
  friend_db:
    image: postgres:latest
    pull_policy: missing
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root_pass
      POSTGRES_DB: friend_db
    volumes:
      - ./friend-service/postgres-db-init:/docker-entrypoint-initdb.d
    ports:
      - "5435:5432"

